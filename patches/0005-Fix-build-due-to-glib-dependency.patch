From caafd2fe80cc377603ef73827818fed29a56626c Mon Sep 17 00:00:00 2001
From: Joone Hur <joone.hur@intel.com>
Date: Wed, 7 May 2014 17:12:04 -0700
Subject: [PATCH] Fix build due to glib dependency.

Chromium started to use glib to parse .desktop file instead of its own one.
However, use_glib is not added when use_ozone is defined, which causes build error.

https://codereview.chromium.org/7000018
https://codereview.chromium.org/249583003
---
 chrome/browser/shell_integration_linux.cc |   19 +++++++++++++++++++
 1 file changed, 19 insertions(+)

diff --git a/chrome/browser/shell_integration_linux.cc b/chrome/browser/shell_integration_linux.cc
index b2b111e..dd7d752 100644
--- a/chrome/browser/shell_integration_linux.cc
+++ b/chrome/browser/shell_integration_linux.cc
@@ -5,7 +5,11 @@
 #include "chrome/browser/shell_integration_linux.h"
 
 #include <fcntl.h>
+
+#if defined(USE_GLIB)
 #include <glib.h>
+#endif
+
 #include <stdlib.h>
 #include <sys/stat.h>
 #include <sys/types.h>
@@ -444,6 +448,10 @@ ShellIntegration::DefaultWebClientState GetIsDefaultWebClient(
 // Get the value of NoDisplay from the [Desktop Entry] section of a .desktop
 // file, given in |shortcut_contents|. If the key is not found, returns false.
 bool GetNoDisplayFromDesktopFile(const std::string& shortcut_contents) {
+#if defined(USE_OZONE)
+  NOTIMPLEMENTED();
+  return false;
+#else
   // An empty file causes a crash with glib <= 2.32, so special case here.
   if (shortcut_contents.empty())
     return false;
@@ -472,6 +480,7 @@ bool GetNoDisplayFromDesktopFile(const std::string& shortcut_contents) {
 
   g_key_file_free(key_file);
   return nodisplay;
+#endif
 }
 
 // Gets the path to the Chrome executable or wrapper script.
@@ -778,6 +787,10 @@ std::string GetDesktopFileContentsForCommand(
     const std::string& icon_name,
     const std::string& categories,
     bool no_display) {
+#if defined(USE_OZONE)
+  NOTIMPLEMENTED();
+  return std::string("");
+#else
   // Although not required by the spec, Nautilus on Ubuntu Karmic creates its
   // launchers with an xdg-open shebang. Follow that convention.
   std::string output_buffer = std::string(kXdgOpenShebang) + "\n";
@@ -844,10 +857,15 @@ std::string GetDesktopFileContentsForCommand(
 
   g_key_file_free(key_file);
   return output_buffer;
+#endif
 }
 
 std::string GetDirectoryFileContents(const base::string16& title,
                                      const std::string& icon_name) {
+#if defined(USE_OZONE)
+  NOTIMPLEMENTED();
+  return std::string("");
+#else
   // See http://standards.freedesktop.org/desktop-entry-spec/latest/
   GKeyFile* key_file = g_key_file_new();
 
@@ -879,6 +897,7 @@ std::string GetDirectoryFileContents(const base::string16& title,
 
   g_key_file_free(key_file);
   return output_buffer;
+#endif
 }
 
 bool CreateDesktopShortcut(
-- 
1.7.9.5

